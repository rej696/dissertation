@inproceedings{IoTFuzzer_2018,
    title={IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing},
    author={Jiongyi Chen and Wenrui Diao and Qingchuan Zhao and Chaoshun Zuo and Zhiqiang Lin and XiaoFeng Wang and Wing Cheong Lau and Menghan Sun and Ronghai Yang and Kehuan Zhang},
    booktitle={Network and Distributed System Security Symposium},
    year={2018},
    url={https://api.semanticscholar.org/CorpusID:158965}
}

@article{Muench_2018, title={What you corrupt is not what you crash: Challenges in fuzzing embedded devices}, DOI={10.14722/ndss.2018.23166}, journal={Proceedings 2018 Network and Distributed System Security Symposium}, author={Muench, Marius and Stijohann, Jan and Kargl, Frank and Francillon, Aurelien and Balzarotti, Davide}, year={2018}}

@inproceedings {Maier_2019,
author = {Dominik Maier and Benedikt Radtke and Bastian Harren},
title = {Unicorefuzz: On the Viability of Emulation for Kernelspace Fuzzing},
booktitle = {13th USENIX Workshop on Offensive Technologies (WOOT 19)},
year = {2019},
address = {Santa Clara, CA},
url = {https://www.usenix.org/conference/woot19/presentation/maier},
publisher = {USENIX Association},
month = aug,
}

@inproceedings {kAFL_2017,
author = {Sergej Schumilo and Cornelius Aschermann and Robert Gawlik and Sebastian Schinzel and Thorsten Holz},
title = {{kAFL}: {Hardware-Assisted} Feedback Fuzzing for {OS} Kernels},
booktitle = {26th USENIX Security Symposium (USENIX Security 17)},
year = {2017},
isbn = {978-1-931971-40-9},
address = {Vancouver, BC},
pages = {167--182},
url = {https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo},
publisher = {USENIX Association},
month = aug
}

@inproceedings{Hernandez_2022,
    title = "FirmWire: Transparent Dynamic Analysis for Cellular Baseband Firmware",
    abstract = "Smartphones today leverage baseband processors to implement the multitude of cellular protocols. Basebands execute firmware, which is responsible for decoding hundreds of message types developed from three decades of cellular standards. Despite its large over-the-air attack surface, baseband firmware has received little security analysis. Previous work mostly analyzed only a handful of firmware images from a few device models, but often relied heavily on time-consuming manual static analysis or single-function fuzzing.To fill this gap, we present FirmWire, the first full-system emulation platform for baseband processors that executes unmodified baseband binary firmware. FirmWire provides baseband-specific APIs to easily add support for new vendors, firmware images, and security analyses. To demonstrate FirmWire{\textquoteright}s scalability, we support 213 firmware images across 2 vendors and 9 phone models, allowing them to be executed and tested. With these images, FirmWire automatically discovers and bridges internal baseband APIs, allowing protocol messages to be injected with ease. Using these entry points, we selected the LTE and GSM protocols for fuzzing and discovered 7 pre-authentication memory corruptions that could lead to remote code execution--4 of which were previously unknown. We reproduced these crashes over-the-air on real devices, proving FirmWire{\textquoteright}s emulation accuracy. FirmWire is a scalable platform for baseband security testing and we release it as open-source to the community for future research.",
    keywords = "classbinary, projintersect, projtropics, typeconf, typepaper, typetier1, typetop",
    author = "Grant Hernandez and Marius Muench and Dominik Maier and Alyssa Milburn and Shinjo Park and Tobias Scharnowski and Tyler Tucker and Patrick Traynor and Butler, {Kevin R. B.}",
    year = "2022",
    month = apr,
    day = "28",
    doi = "10.14722/ndss.2022.23136",
    pages = "1--19",
    booktitle = "NDSS Symposium 2022 Accepted Papers",
    publisher = "The Internet Society",
    address = "United States",
}
% note = "Network and Distributed Systems Security (NDSS) Symposium 2022, NDSS 2022 ; Conference date: 24-04-2022 Through 28-04-2022",

@article{Borsig_2020, title={Fuzzing framework for ESP32 microcontrollers}, DOI={10.1109/wifs49906.2020.9360889}, journal={2020 IEEE International Workshop on Information Forensics and Security (WIFS)}, author={Borsig, Matthias and Nitzsche, Sven and Eisele, Max and Groll, Roland and Becker, Jurgen and Baumgart, Ingmar}, year={2020}}

@article{Clements_2021, title={Is your firmware real or re-hosted? A case study in re-hosting vxworks control system firmware}, DOI={10.14722/bar.2021.23006}, journal={Proceedings 2021 Workshop on Binary Analysis Research}, author={Clements, Abraham A. and Carpenter, Logan and Moeglein, William A. and Wright, Christopher}, year={2021}}

@article{Yun_2022,
author = {Yun, Joobeom and Rustamov, Fayozbek and Kim, Juhwan and Shin, Youngjoo},
title = {Fuzzing of Embedded Systems: A Survey},
year = {2022},
issue_date = {July 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {55},
number = {7},
issn = {0360-0300},
url = {https://doi.org/10.1145/3538644},
doi = {10.1145/3538644},
abstract = {Security attacks abuse software vulnerabilities of IoT devices; hence, detecting and eliminating these vulnerabilities immediately are crucial. Fuzzing is an efficient method to identify vulnerabilities automatically, and many publications have been released to date. However, fuzzing for embedded systems has not been studied extensively owing to various obstacles, such as multi-architecture support, crash detection difficulties, and limited resources. Thus, the article introduces fuzzing techniques for embedded systems and the fuzzing differences for desktop and embedded systems. Further, we collect state-of-the-art technologies, discuss their advantages and disadvantages, and classify embedded system fuzzing tools. Finally, future directions for fuzzing research of embedded systems are predicted and discussed.},
journal = {ACM Comput. Surv.},
month = {dec},
articleno = {137},
numpages = {33},
keywords = {Firmware fuzzing, fuzzing, IoT devices, firmware analysis, embedded systems, software testing, symbolic execution, concolic execution}
}

@article{Eisele_et_al_2022, title={Embedded fuzzing: A review of challenges, tools, and solutions}, volume={5}, DOI={10.1186/s42400-022-00123-y}, number={1}, journal={Cybersecurity}, author={Eisele, Max and Maugeri, Marcello and Shriwas, Rachna and Huth, Christopher and Bella, Giampaolo}, year={2022}}

@article{Eisele_2022, title={Debugger-driven embedded fuzzing}, DOI={10.1109/icst53961.2022.00062}, journal={2022 IEEE Conference on Software Testing, Verification and Validation (ICST)}, author={Eisele, Max}, year={2022}}

@inproceedings{Chen_2022,
author = {Chen, Libo and Cai, Quanpu and Ma, Zhenbang and Wang, Yanhao and Hu, Hong and Shen, Minghang and Liu, Yue and Guo, Shanqing and Duan, Haixin and Jiang, Kaida and Xue, Zhi},
title = {SFuzz: Slice-Based Fuzzing for Real-Time Operating Systems},
year = {2022},
isbn = {9781450394505},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3548606.3559367},
doi = {10.1145/3548606.3559367},
abstract = {Real-Time Operating System (RTOS) has become the main category of embedded systems. It is widely used to support tasks requiring real-time response such as printers and switches. The security of RTOS has been long overlooked as it was running in special environments isolated from attackers. However, with the rapid development of IoT devices, tremendous RTOS devices are connected to the public network. Due to the lack of security mechanisms, these devices are extremely vulnerable to a wide spectrum of attacks. Even worse, the monolithic design of RTOS combines various tasks and services into a single binary, which hinders the current program testing and analysis techniques working on RTOS. In this paper, we propose SFuzz, a novel slice-based fuzzer, to detect security vulnerabilities in RTOS. Our insight is that RTOS usually divides a complicated binary into many separated but single-minded tasks. Each task accomplishes a particular event in a deterministic way and its control flow is usually straightforward and independent. Therefore, we identify such code from the monolithic RTOS binary and synthesize a slice for effective testing. Specifically, SFuzz first identifies functions that handle user input, constructs call graphs that start from callers of these functions, and leverages forward slicing to build the execution tree based on the call graphs and pruning the paths independent of external inputs. Then, it detects and handles roadblocks within the coarse-grain scope that hinder effective fuzzing, such as instructions unrelated to the user input. And then, it conducts coverage-guided fuzzing on these code snippets. Finally, SFuzz leverages forward and backward slicing to track and verify each path constraint and determine whether a bug discovered in the fuzzer is a real vulnerability. SFuzz successfully discovered 77 zero-day bugs on 35 RTOS samples, and 67 of them have been assigned CVE or CNVD IDs. Our empirical evaluation shows that SFuzz outperforms the state-of-the-art tools (e.g., UnicornAFL) on testing RTOS.},
booktitle = {Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security},
pages = {485-498},
numpages = {14},
keywords = {taint analysis, concolic execution, rtos, slice-based fuzzing},
location = {Los Angeles, CA, USA},
series = {CCS '22}
}

@article{Beckmann_2023, title={Coverage-guided fuzzing of embedded systems leveraging hardware tracing}, DOI={10.1007/978-3-031-25460-4_21}, journal={Computer Security. ESORICS 2022 International Workshops}, author={Beckmann, Maximilian and Steffan, Jan}, year={2023}, pages={362-378}}

@inproceedings {HALucinator_2020,
    author = {Abraham A Clements and Eric Gustafson and Tobias Scharnowski and Paul Grosen and David Fritz and Christopher Kruegel and Giovanni Vigna and Saurabh Bagchi and Mathias Payer},
    title = {{HALucinator}: Firmware Re-hosting Through Abstraction Layer Emulation},
    booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
    year = {2020},
    isbn = {978-1-939133-17-5},
    pages = {1201--1218},
    url = {https://www.usenix.org/conference/usenixsecurity20/presentation/clements},
    publisher = {USENIX Association},
    month = aug
}

@inproceedings {Fuzzware_2022,
    title = {Fuzzware: Using Precise {MMIO} Modeling for Effective Firmware Fuzzing},
    booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
    year = {2022},
    address = {Boston, MA},
    url = {https://www.usenix.org/conference/usenixsecurity22/presentation/scharnowski},
    publisher = {USENIX Association},
    author={Scharnowski, Tobias and Bars, Nils and Schloegel, Moritz and Gustafson, Eric and Muench, Marius and Vigna, Giovanni and Kruegel, Christopher and Holz, Thorsten and Abbasi, Ali},
    month = aug,
}

@inproceedings {Hoedur_2023,
    title = {Hoedur: Embedded Firmware Fuzzing using Multi-Stream Inputs},
    booktitle = {32nd USENIX Security Symposium (USENIX Security 23)},
    year = {2023},
    address = {Boston, MA},
    url = {https://www.usenix.org/conference/usenixsecurity23/presentation/scharnowski},
    publisher = {USENIX Association},
    author={Scharnowski, Tobias and Woerner, Simon and Buchmann, Felix and Bars, Nils and Schloegel, Moritz and Holz, Thorsten},
    month = aug,
}

@inproceedings {Fuzztruction_2023,
    author = {Nils Bars and Moritz Schloegel and Tobias Scharnowski and Nico Schiller and Thorsten Holz},
    title = {Fuzztruction: Using Fault Injection-based Fuzzing to Leverage Implicit Domain Knowledge},
    booktitle = {32nd USENIX Security Symposium (USENIX Security 23)},
    year = {2023},
    isbn = {978-1-939133-37-3},
    address = {Anaheim, CA},
    pages = {1847--1864},
    url = {https://www.usenix.org/conference/usenixsecurity23/presentation/bars},
    publisher = {USENIX Association},
    month = aug
}

@inproceedings{Seidel_2023,
    title = "Forming Faster Firmware Fuzzers",
    abstract = "A recent trend for assessing the security of an embedded system{\textquoteright}s firmware is rehosting, the art of running the firmware in a virtualized environment, rather than on the original hardware platform. One significant use case for firmware rehosting is fuzzing to dynamically uncover security vulnerabilities.However, state-of-the-art implementations suffer from high emulator-induced overhead, leading to less-than-optimal execution speeds. Instead of emulation, we propose near-native rehosting: running embedded firmware as a Linux userspace process on a high-performance system that shares the instruction set family with the targeted device. We implement this approach with SAFIREFUZZ, a throughput-optimized rehosting and fuzzing framework for ARM Cortex-M firmware. SAFIREFUZZ takes monolithic binary-only firmware images and uses high-level emulation (HLE) and dynamic binary rewriting to run them on far more powerful hardware with low overhead. By replicating experiments of HALucinator, the state-of-the-art HLE-based rehosting system for binary firmware, we show that SAFIREFUZZ can provide a 690x throughput increase on average during 24-hour fuzzing campaigns while covering up to 30% more basic blocks.",
    author = "Lukas Seidel and Dominik Maier and Marius Muench",
    year = "2023",
    month = aug,
    day = "9",
    isbn = "9781939133373",
    pages = "2903--2920",
    booktitle = "Proceedings of the 32nd USENIX Security Symposium",
    publisher = "USENIX Association",
}
% note = "Acknowledgments: This work was supported by the European Union{\textquoteright}s Horizon 2020 research and innovation programme under project TESTABLE, grant agreement No. 101019206, the Dutch Ministry of Economic Affairs and Climate through the AVR program (Memo project) and the Dutch Science Organization NWO through projects Theseus and NWA ORC Intersect. ; 32nd USENIX Security Symposium ; Conference date: 09-08-2023 Through 11-08-2023",

@article{Zhang_2024,
   title={A Survey of Protocol Fuzzing},
   volume={57},
   ISSN={1557-7341},
   url={http://dx.doi.org/10.1145/3696788},
   DOI={10.1145/3696788},
   number={2},
   journal={ACM Computing Surveys},
   publisher={Association for Computing Machinery (ACM)},
   author={Zhang, Xiaohan and Zhang, Cen and Li, Xinghua and Du, Zhengjie and Mao, Bing and Li, Yuekang and Zheng, Yaowen and Li, Yeting and Pan, Li and Liu, Yang and Deng, Robert},
   year={2024},
   month=oct, pages={1-36}
}

% same thing as me basically:

@ARTICLE{Gutierrez_2021,
  author={Gutierrez, Tamara and Bergel, Alexandre and Gonzalez, Carlos E. and Rojas, Camilo J. and Diaz, Marcos A.},
  journal={IEEE Access},
  title={Systematic Fuzz Testing Techniques on a Nanosatellite Flight Software for Agile Mission Development},
  year={2021},
  volume={9},
  number={},
  pages={114008-114021},
  keywords={Software;Testing;CubeSat;Fuzzing;Hardware;Space vehicles;Space missions;CubeSat;embedded software;flight software;nanosatellites;testing;fuzz testing;software quality;open source},
  doi={10.1109/ACCESS.2021.3104283}
}

@article{Scharnowski_2023,
  title={A Case Study on Fuzzing Satellite Firmware},
  author={Tobias Scharnowski and Felix Buchmann and Simon W{\"o}rner and Thorsten Holz},
  journal={Proceedings 2023 Workshop on Security of Space and Satellite Systems},
  year={2023},
  url={https://api.semanticscholar.org/CorpusID:259380367}
}

@INPROCEEDINGS{Willbold_2024,
    author={Willbold, Johannes and Schloegel, Moritz and Göhler, Florian and Scharnowski, Tobias and Bars, Nils and Wörner, Simon and Schiller, Nico and Holz, Thorsten},
    booktitle={2024 IEEE Aerospace Conference},
    title={Scaling Software Security Analysis to Satellites: Automated Fuzz Testing and Its Unique Challenges},
    year={2024},
    volume={},
    number={},
    pages={1-12},
    keywords={Space vehicles;Satellites;Computer bugs;Fuzzing;Aerospace electronics;Software;Internet},
    doi={10.1109/AERO58975.2024.10521316}
}

% Space technical references:
% Good for satellite architecture and OBC stuff.

@online{Farges_2022,
    author = {Farges, Thibault and Levi Cescutti, Ugo},
    year = {2022},
    month = {03},
    pages = {},
    title = {Space Flight Software Systems: An approach to understanding their Open Source Framework Paradigm},
    doi = {10.13140/RG.2.2.12451.94244}
}

@article{Cratere_2024,
author = {Cratere, Angela and Sanca, Gabriel and Golmar, Federico and Dell'Olio, Francesco},
year = {2024},
month = {01},
pages = {1-1},
title = {On-Board Computer for CubeSats: State-of-the-Art and Future Trends},
volume = {PP},
journal = {IEEE Access},
doi = {10.1109/ACCESS.2024.3428388}
}

@incollection{Cubesat_Handbook_OBSW,
title = {12 - Onboard software},
editor = {Chantal Cappelletti and Simone Battistini and Benjamin K. Malphrus},
    booktitle = {Cubesat Handbook},
    publisher = {Academic Press},
    pages = {237-250},
    year = {2021},
    isbn = {978-0-12-817884-3},
    doi = {https://doi.org/10.1016/B978-0-12-817884-3.00012-6},
    url = {https://www.sciencedirect.com/science/article/pii/B9780128178843000126},
    author = {Santiago {Iglesias Cofán} and Arno Formella},
    keywords = {CubeSat onboard software, Software design and development process, Software architecture, Mission experience},
    abstract = {This chapter provides an overview of the software engineering process for the development of onboard software for small satellites. Such a process should be guided by clearly specified requirements that are testable and traceable. Two important decisions that must be drawn in a CubeSat satellite project to achieve high-quality software are which software architecture to use and which design methodology to employ. In a CubeSat project one can observe a shift from hardware cost to software cost, as in many cases off the shelf products for hardware components can be used, however, the controlling software that implements all system requirements usually remains to be developed and tested. Simulation and fault analysis are valuable tools from the software engineering point of view that help the mission to succeed. Every part of the software that is not tested rigorously tends to put the entire mission into risk.}
}

% Space business stuff

@article{Sweeting_2018,
  title={Modern small satellites-changing the economics of space},
  author={Sweeting, Martin N},
  journal={Proceedings of the IEEE},
  volume={106},
  number={3},
  pages={343--361},
  year={2018},
  publisher={IEEE}
}

@article{Bousedra_2024,
    title = {Downstream Space Activities in the New Space Era: Paradigm Shift and Evaluation Challenges},
    journal = {Space Policy},
    volume = {64},
    pages = {101553},
    year = {2023},
    issn = {0265-9646},
    doi = {https://doi.org/10.1016/j.spacepol.2023.101553},
    url = {https://www.sciencedirect.com/science/article/pii/S0265964623000152},
    author = {Kenza Bousedra},
    keywords = {New space, Space sector, Downstream applications, Literature review, Economic size, Evaluation},
    abstract = {New Space refers to the recent opening-up of the space sector to private companies. The liberalization of space activities, which coincides with the digital evolution of the economy, is associated with the rapid expansion of the downstream space segment, i.e., space-related commercial products and services. In this paper, we address the issue of evaluating the size of the downstream space sector in light of New Space characteristics. We describe New Space as a structural transformation of the space sector associated with the entry of private companies and investors, the adoption of new business models, and the reorientation of space agencies towards market-oriented policies. In this specific context, we claim that assessing the economic weight of downstream space activities is of prime interest. Our review of space sector evaluations shows limitations of the existing methodological tools when identifying and evaluating downstream activities. We conclude this work by outlining theoretical issues regarding New Space and the expansion of space-based services markets to be considered for a new evaluation methodology.}
}

% extra references not too relevent:

@article{Godefroid_2012, title={Sage: Whitebox fuzzing for Security Testing}, volume={10}, DOI={10.1145/2090147.2094081}, number={1}, journal={Queue}, author={Godefroid, Patrice and Levin, Michael Y. and Molnar, David}, year={2012}, pages={20-27}}

@article{Krishnamoorthy_2010, title={Tackling the path explosion problem in symbolic execution-driven test generation for programs}, DOI={10.1109/ats.2010.19}, journal={2010 19th IEEE Asian Test Symposium}, author={Krishnamoorthy, Saparya and Hsiao, Michael S. and Lingappan, Loganathan}, year={2010}}

@INPROCEEDINGS{Svoboda_2021,
  author={Svoboda, David},
  booktitle={2021 IEEE Secure Development Conference (SecDev)},
  title={Hands-on Tutorial: How Exploitable is Insecure C Code?},
  year={2021},
  volume={},
  number={},
  pages={7-8},
  doi={10.1109/SecDev51306.2021.00015}
}

@ARTICLE{Abdumohasan_2021,
author={Aloseel, Abdulmohsan and He, Hongmei and Shaw, Carl and Khan, Muhammad Ali},
journal={IEEE Access},
title={Analytical Review of Cybersecurity for Embedded Systems},
year={2021},
volume={9},
number={},
pages={961-982},
doi={10.1109/ACCESS.2020.3045972}
}

% Links and things

@article{CubesatDesignSpec,
  title={CubeSat Design Specification, the Cube Sat Program},
  author={Munakata, R},
  journal={Cal Poly SLO, San Luis Obispo, Rev},
  volume={11},
  year={2008}
}

@online{Google_2023,
    author={Google},
    title={OSS-Fuzz},
    url={https://google.github.io/oss-fuzz/},
    urldate = {2023-11-28},
    year = {2023},
}
@online{Honggfuzz,
    author={Google},
    title={Honggfuzz},
    url={https://github.com/google/honggfuzz},
    urldate = {2024-12-20},
    year = {2024},
}
@online{Behrang_2023,
    author={Behrang, F.},
    title = {nrf52 radio emu},
    url = {https://github.com/befoulad/nrf52_radio_emu},
    urldate = {2023-12-28},
    year = {2023},
}
@online{blackpill_info,
    author={stm32world},
    title = {Black Pill},
    url = {https://stm32world.com/wiki/Black_Pill},
    urldate = {2024-11-11},
    year = {2024},
}

@online{stm32hal,
    author={STMicroelectronics},
    title = {STM32CubeF4 HAL Driver MCU Component},
    url = {https://github.com/STMicroelectronics/stm32f4xx-hal-driver},
    urldate = {2024-11-11},
    year = {2024},
}

@online{Unicorn,
    author={Nguyen, Anh Quynh and Dang, Hoang Vu},
    title = {Unicorn: Next Generation CPU Emulator Framework},
    url = {https://www.unicorn-engine.org/BHUSA2015-unicorn.pdf},
    urldate = {2024-12-05},
    year = {2015},
}

https://www.unicorn-engine.org/docs/beyond_qemu.html
@online{UnicornMode,
    author={Maier, Dominik and Voss, Nathan and Fioraldi, Andrea},
    title = {Unicorn-based binary-only instrumentation for afl-fuzz},
    url = {https://github.com/AFLplusplus/AFLplusplus/blob/stable/unicorn_mode/README.md},
    urldate = {2023-12-28},
    year = {2023},
}
@online{AFL_2019,
    author={Google},
    title={AFL (american fuzzy lop)},
    url={https://afl-1.readthedocs.io/en/latest/index.html},
    urldate = {2023-11-28},
    year = {2019},
}

@online{Nasa_cFS,
    author={NASA},
    title={The core Flight System},
    url={https://etd.gsfc.nasa.gov/capabilities/core-flight-system/},
    urldate={2024-11-25},
    year={2024},
}
@online{Bal_FSDK,
    author={BrightAscension},
    title={Flight Software Development Kit},
    url={https://brightascension.com/products/flight-software-development-kit/},
    urldate={2024-12-10},
    year={2024},
}

@online{Bal_Options,
    author={BrightAscension},
    title={Flight Software Development Kit: Systems and Platforms},
    url={https://brightascension.com/products/systems-and-platforms/},
    urldate={2024-12-10},
    year={2024},
}

@online{EnduroSat_OBC,
    author = {EnduroSat},
    title={On Board Computer},
    url={https://www.endurosat.com/products/onboard-computer/},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Nano_OBC,
    author = {NanoAvionics},
    title={CubeSat On-Board Computer - Main Bus Unit SatBus 3C2},
    url={https://nanoavionics.com/cubesat-components/cubesat-on-board-computer-main-bus-unit-satbus-3c2/},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Clydespace_Kryten,
    author = {AAC-ClydeSpace},
    title={Kryten-M3 \& Kryten-M3 Plus},
    url={https://www.aac-clyde.space/what-we-do/space-products-components/command-data-handling/kryten-m3},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Cortex_M7,
    author = {ARM},
    title = {Cortex-M7},
    url={https://developer.arm.com/Processors/Cortex-M7},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Cortex_M4,
    author = {ARM},
    title = {Cortex-M4},
    url={https://developer.arm.com/Processors/Cortex-M4},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Cortex_M3,
    author = {ARM},
    title = {Cortex-M3},
    url={https://developer.arm.com/Processors/Cortex-M3},
    urldate = {2024-12-16},
    year = {2024},
}

@online{Satlab_SRS3,
    author = {satlab},
    title = {SRS-3 Full-duplex S-band Transceiver},
    url={https://satlab.com/products/srs-3/},
    urldate = {2024-12-16},
    year = {2024},
}

@online{gnatfuzz,
    author={AdaCore},
    title={Gnatfuzz User's Guide},
    url={https://docs.adacore.com/live/wave/gnatdas/html/gnatdas_ug/gnatfuzz/gnatfuzz_part.html},
    urldate = {2024-01-02},
    year = {2023},
}

@ARTICLE{Nasa_10,
  author={Holzmann, G.J.},
  journal={Computer},
  title={The power of 10: rules for developing safety-critical code},
  year={2006},
  volume={39},
  number={6},
  pages={95-99},
  keywords={Upper bound;Testing;Software safety;NASA;Laboratories;Statistical analysis;Job shop scheduling;Guidelines;Performance evaluation;Data encapsulation;software technologies;coding rules;software development},
  doi={10.1109/MC.2006.212}
}

@article{Suchai_FSW,
author={C. E. {Gonzalez} and C. J. {Rojas} and A. {Bergel} and M. A. {Diaz}},
journal={IEEE Access},
title={An architecture-tracking approach to evaluate a modular and extensible flight software for CubeSat nanosatellites},
year={2019},
volume={},
number={},
pages={1-1},
keywords={cubesat;embedded software;flight software;nanosatellites;software architecture;software quality;software visualization;open source},
doi={10.1109/ACCESS.2019.2927931},
ISSN={2169-3536},
month={},
}


% Breaks other references unless last
@article{Denis_2020,
    title = {From new space to big space: How commercial space dream is becoming a reality},
    journal = {Acta Astronautica},
    volume = {166},
    pages = {431-443},
    year = {2020},
    issn = {0094-5765},
    doi = {https://doi.org/10.1016/j.actaastro.2019.08.031},
    url = {https://www.sciencedirect.com/science/article/pii/S0094576519313451},
    author = {Gil Denis and Didier Alary and Xavier Pasco and Nathalie Pisot and Delphine Texier and Sandrine Toulza},
    keywords = {Newspace, Innovation, Space economy, Space ecosystem, Start-ups, Venture capital},
    abstract = {New space is a misleading expression. Many new trends steer the evolution of space activities. Development of commercial space, with start-ups and space ventures, is one of the most visible trends in space. Stimulated by the first initiatives related to space tourism, access to space and the growing use of small satellites, space activities have attracted new entrepreneurs, both start-ups and big web actors with substantial investment capacity. This revolution started in the Silicon Valley and spread worldwide. Start-ups have attracted around $21.8 billion of investment from 2000 to 2018. It is far below the annual institutional budgets but the pace gained momentum since 2006 and specially 2012. Between teenage crisis and age of reason, New space is now old: the first start-ups shall confirm their promises, while new players pop up and try to find their way. It shakes the legacy players but they demonstrate resilience and adaptation capacity. It is now the right time to take stock of the first lessons learnt. Start-ups disrupt the established industry? Instead of a simplistic shortcut, this paper reports an “organizational ecology” study. With a deliberate industrial viewpoint, its ambition is to help understanding complex evolutions in the space ecosystem. The first part of the paper introduces the current ecosystem, its actors, the key trends and the main types of activities. Through facts and figures on technology, investments and markets, the second part reviews how “new space” trends are preparing the advent of big space. The third part summarises lessons from other industries and typical disruption scenarios that could affect space activities. The drivers of New space are discussed in section four. The last part is a foresight exercise, discussing possible evolutions and impacts, threats and opportunities. The decisive role of institutional actors and the « new space » with more and more space-faring nations is also highlighted. Something big is happening in space. While it is too early to depict the new landscape, this study shows that the future picture will not be black and white but more colourful. The size and the age of the company are less important than agility, mindset, ability to manage risks and to cooperate. A big vision for the future, from entrepreneurs or from nations, is also needed.}
}
