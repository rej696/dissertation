#!/usr/bin/env python
from datetime import datetime
import serial
import click
import random
import subprocess
import threading
import time
from ccsds.kiss import kiss_pack, kiss_unpack
from ccsds.packetstream import (
    spacepacket_factory, bytes2fields, spacepackets2bytes, ACTION_APID, GET_PARAM_APID, SET_PARAM_APID, TELEM_APID
)
from ccsds.utils import checksum, take
from spacepackets.ccsds.spacepacket import SpacePacketHeader, PacketType


def setup_serial(dev: str) -> serial.Serial:
    return serial.Serial(dev)


def monitor_debug(ser, timeout):
    last_tick = datetime.now().timestamp()
    while True:
        line = ser.read_all().decode("utf-8")
        timestamp = datetime.now().timestamp()
        if line.strip():
            for s in line.strip().split("\n"):
                print(
                    f"[{datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")}] {s}")
        if "tick" in line or "tock" in line:
            last_tick = timestamp
        if timestamp - last_tick > timeout:
            print(
                f"[{datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")}] "
                + f"ERROR in range {datetime.fromtimestamp(last_tick).strftime("%H:%M:%S")}"
                + f" -> {datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")}"
            )
            # reset the hardware
            print("\nResetting Board")
            subprocess.run(["st-flash", "reset"])
            print("Board Reset\n")
        time.sleep(1)


def send_packet(ser, packet: bytes):
    print(
        f"[{datetime.now().strftime("%H:%M:%S")}] input:  " +
        bytearray(packet).hex(" ")
    )
    ser.write(packet)
    time.sleep(1)
    response = bytearray(ser.read_all())
    print("kiss frame: " + response.hex(" "))
    print("spacepacket: " + kiss_unpack(response).hex(" "))


def create_packet(apid: int, data: list) -> bytes:
    data_bytes = serial.to_bytes(data)
    seq_count = 0
    sph = SpacePacketHeader(
        packet_type=PacketType.TC,
        apid=apid,
        seq_count=seq_count,
        data_len=len(data) - 1,
    )
    return kiss_pack(checksum(bytearray(sph.pack() + data_bytes)))


def blackbox_generator():
    try:
        while True:
            # yield random.randbytes(1)
            yield random.randint(0, 255)
    except KeyboardInterrupt:
        raise StopIteration


def fuzzstream():
    for flags, spp, data in spacepacket_factory(bytes2fields(blackbox_generator())):
        # use trigger as mutation, e.g.
        # - toggle randomise payload
        # - toggle randomise spacepacket header fields
        # - toggle randomise checksum
        # - toggle randomise/invalid framing

        yield bytearray(spacepackets2bytes([(flags, spp, data)]))


@click.group()
@click.option("--dev", default="/dev/ttyUSB0", type=str)
@click.pass_context
def cli(ctx, dev):
    ctx.ensure_object(dict)
    ctx.obj["serial"] = setup_serial(dev)


@cli.command()
@click.argument("action_id", type=int)
@click.pass_context
def action(ctx, action_id):
    send_packet(ctx.obj["serial"], create_packet(ACTION_APID, [action_id]))


@cli.command()
@click.argument("param_id", type=int)
@click.pass_context
def get_param(ctx, param_id):
    send_packet(ctx.obj["serial"], create_packet(GET_PARAM_APID, [param_id]))


@cli.command()
@click.argument("param_id", type=int)
@click.argument(
    "data",
    type=lambda x: bytes(eval(x)),
)
@click.pass_context
def set_param(ctx, param_id, data):
    """data: pass a list of integer literals (uint8), e.g. [0xAB, 3, 0xFF]"""
    send_packet(
        ctx.obj["serial"], create_packet(
            SET_PARAM_APID, [param_id] + list(data))
    )


@cli.command()
@click.argument("tlm_id", type=int)
@click.pass_context
def tlm(ctx, tlm_id):
    send_packet(ctx.obj["serial"], create_packet(TELEM_APID, [tlm_id]))


@cli.command()
@click.argument("n", type=int)
@click.option("--delay", default=10, type=int)
@click.pass_context
def fuzz_times(ctx, n, delay):
    print(f"Fuzzing {n} times with delay {delay}")
    first = True
    for frame in take(fuzzstream(), n):
        if not first:
            time.sleep(delay)
        first = False

        send_packet(ctx.obj["serial"], frame)


@cli.command()
@click.option("--delay", default=10, type=int)
@click.pass_context
def fuzz(ctx, delay):
    print(f"Fuzzing with delay {delay}")
    first = True
    for frame in fuzzstream():
        if not first:
            time.sleep(delay)
        first = False

        send_packet(ctx.obj["serial"], frame)


@cli.command()
@click.option("--timeout", default=5, type=int)
@click.pass_context
def log(ctx, timeout):
    monitor_debug(ctx.obj["serial"], timeout)


@cli.command()
@click.argument(
    "data",
    type=lambda x: bytes(eval(x)),
)
@click.pass_context
def send_bytes(ctx, data):
    """data: pass a list of integer literals (uint8), e.g. [0xAB, 3, 0xFF]"""
    send_packet(
        ctx.obj["serial"], bytearray(data)
    )


if __name__ == "__main__":
    cli(obj={})
